local_costmap:
  global_frame: odom
  robot_base_frame: base_link
  footprint: [[-0.23, -0.19], [-0.23, 0.19], [0.23, 0.19], [0.23, -0.19]]
  # 로컬 costmap 갱신 주기
  update_frequency: 15.0     # Hz
  publish_frequency: 15.0     # RViz 등으로 발행 주기 (약간 낮춰도 됨)
  transform_tolerance: 1.0 #0.5

  # 실시간 장애물 반영 설정
  static_map: false
  rolling_window: true

  # 로컬 costmap의 크기 및 해상도
  width: 10.0       # 너무 크면 CPU 부담, 너무 작으면 시야 좁음
  height: 10.0
  resolution: 0.1 # 해상도가 너무 낮으면 부정확, 너무 높으면 계산량 많음

  # 플러그인 (layers) 선언
  plugins:
    - name: obstacle_layer
      type: "costmap_2d::ObstacleLayer"
    - name: inflation_layer
      type: "costmap_2d::InflationLayer" 
    - name: costmap_converter
      type: "costmap_converter::CostmapToPolygonsDBSConcaveHull"

  # 장애물 레이어 설정
  obstacle_layer:
    enabled: true
    obstacle_range: 5.0       # 센서가 장애물을 인식할 최대 범위
    raytrace_range: 5.0       # 센서 클리어링(장애물 제거)용 최대 범위
    origin_z: 0.0
    z_resolution: 0.2
    z_voxels: 2
    track_unknown_space: false
    footprint_clearing_enabled: true
    combination_method: 1

    # 센서 데이터 설정 (공통 params)
    observation_sources: scan depth_camera
    scan:
      data_type: LaserScan
      topic: /scan
      sensor_frame: laser     # LIDAR 프레임 이름 (예: laser, base_scan 등)
      clearing: true
      marking: true
      expected_update_rate: 10.0

    
    depth_camera:
      data_type: PointCloud2
      topic: /camera/depth/points
      sensor_frame: camera_depth_optical_frame
      marking: true
      clearing: true
      expected_update_rate: 15.0  # 예시로 카메라의 FPS에 맞춰 조정
  inflation_layer: # 장애물 근처 경로 제한
    enabled: true
    inflation_radius: 3.0  # 장애물 근처에서 경로를 제한하는 거리 (m)
    cost_scaling_factor: 5.0 # 장애물 가까이 접근할수록 비용 증가율 (값 크면 근처로 가는 경로를 더 강하게 제한)
    
  costmap_converter:
    enabled: true

